<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/images/favicon.ico">
    <title>ATF-Codebeamer</title>
    <link rel="stylesheet" type="text/css" href="css/style.css" />
    <link rel="stylesheet" type="text/css" href="css/darkmode.css" />
  
  </head>
  
  <body>
    <header class="header">
        <div class="logo"><a href="https://www.mdsit.co.kr"><img src="images/mds_logo_horizontal.png" alt="Logo" /></a></div>
        <div class="title-container"><h1>Codebeamer Connector</h1><p>VectorCAST Report Hub </p></div>
        <div class="menu-container">
            <span class="menu-item"><img src="images/user.svg" alt="User" /><%= username %></span>
            <a href="#" class="menu-item" onclick="handleLogout()"><img src="images/logout.svg" alt="Logout" />Logout</a>
        </div>                  
    </header>

    <div class="sample-file-section">
        <div class="sample-file-header">
            <h4>📋 데모용 샘플 파일</h4>
            <p>데모용 VectorCAST 결과 샘플 파일을 자동으로 업로드합니다</p>
        </div>
        <div class="sample-file-actions">
            <button class="sample-file-btn primary" onclick="loadDemoSingleSample()">
                📄 Single Report 샘플 파일 사용하기
            </button>
            <button class="sample-file-btn secondary" onclick="loadDemoMultipleSamples()">
                📁 Multiple Reports 샘플 파일 사용하기
            </button>
        </div>
    </div>

    <div class="pipeline-containers">
   
        <!--Single VectorCAST Report Card -->
        <div class="pipeline-container">
            <h2>VectorCAST (Single Report)</h2>
            <div class="pipeline-form">
                <div class="multiple-actions-container">
                    <div class="multiple-actions-header">
                        <span>단일 리포트 결과 일괄 처리</span>
                        <button class="add-action-btn" onclick="addVectorcastAction()">+ 일괄 처리 섹션 추가</button>
                    </div>
                    <div class="attachment-info">
                        <p><strong>📎 리포트 자동 첨부 :</strong> 선택한 HTML 리포트 파일을 자동으로 CodeBeamer의 첨부파일로 업로드합니다.</p>
                    </div>
                    <div id="vectorcastActions">
                        <div class="vectorcast-action" data-index="0">
                            <div class="action-inputs">
                                <div class="selector-container">
                                    <select class="action-project-selector" data-index="0" onchange="loadTrackers(0)">
                                        <option value="">프로젝트 선택</option>
                                    </select>
                                    <select class="action-tracker-selector" data-index="0" onchange="loadItems(0)" disabled>
                                        <option value="">트래커 선택</option>
                                    </select>
                                    <select class="action-item-selector" data-index="0" disabled>
                                        <option value="">아이템 선택</option>
                                    </select>
                                </div>
                                <div class="action-file-drop-zone" data-index="0">
                                    <button class="file-select-btn" onclick="selectFileForAction(0)">파일 선택</button>
                                    <input type="file" class="action-file-input" accept=".html" style="display: none;" onchange="handleActionFileChange(0)">
                                    <span class="action-file-name">파일이 없습니다</span>
                                    <button class="clear-file-btn" onclick="clearActionFile(0)" style="display: none;" title="파일 제거">🗑️</button>
                                </div>
                                <button class="action-view-codebeamer" onclick="viewActionCodebeamer(0)">코드비머 보기</button>
                                <button class="action-view-report" onclick="viewActionReport(0)">리포트 보기</button>
                                <button class="remove-action-btn" onclick="removeVectorcastAction(0)" style="display: none;">×</button>
                            </div>
                        </div>
                    </div>
                    <div class="multiple-actions-controls">
                        <button class="inline-button" onclick="processMultipleVectorcastActions()">
                            <span>결과 전송 및 리포트 첨부</span>
                        </button>
                    </div>
                </div>
            </div>
            <div id="vectorcastStatus" class="status"></div>
            <div id="vectorcastProgress" class="progress-bar" style="display: none;">
                <div class="progress-fill"></div>
                <span class="progress-text">0%</span>
            </div>
            
            <div id="vectorcastResults" class="status-message">
                <h4>전송 결과</h4>
                <div id="vectorcastResultsList"></div>
            </div>
        </div>

        <!-- Multiple VectorCAST Reports Card -->
        <div class="pipeline-container">
            <h2>VectorCAST (Multiple Reports)</h2>
            <div class="pipeline-form">
                <div class="multiple-actions-container">
                <div class="input-container">
                    <div class="selector-container">
                        <select id="multipleProjectSelector" onchange="loadMultipleTrackers()">
                            <option value="">프로젝트 선택</option>
                        </select>
                        <select id="multipleTrackerSelector" onchange="loadMultipleItems()" disabled>
                            <option value="">트래커 선택</option>
                        </select>
                        <select id="multipleItemSelector" disabled>
                            <option value="">아이템 선택</option>
                        </select>
                        <div class="report-link">
                            <a href="#" id="multipleVectorcastReportLink" onclick="viewCodebeamerItem('vectorcastMultiple')">코드비머 보기</a>
                        </div>
                    </div>
                </div>
                
                
                <div class="multiple-file-drop-zone" id="multipleVectorcastDropZone">
                    <p>리포트 파일을 여기에 끌어다 놓으세요 (단일/다중 파일 또는 폴더)</p>
                    <div class="warning-text">
                        <strong>⚠️ 주의:</strong> VectorCAST의 <strong>html 리포트</strong> 이외 다른 파일을 업로드할 경우, 원하는 결과값이 도출되지 않을 수 있습니다. <br>리포트 파일을 업로드 하기 전에 <strong>리포트 파일을 확인하세요.</strong>
                    </div>
                    <div class="upload-buttons">
                        <div class="custom-file-button" onclick="document.getElementById('multipleVectorcastFileInput').click()">파일 선택</div>
                        <div class="custom-file-button" onclick="document.getElementById('multipleVectorcastFolderInput').click()">폴더 선택</div>
                    </div>
                    <input type="file" id="multipleVectorcastFileInput" accept=".html" multiple style="display: none;">
                    <input type="file" id="multipleVectorcastFolderInput" webkitdirectory directory multiple style="display: none;">
                </div>
                <div class="multiple-dropped-files-container" id="multipleVectorcastFilesInfo" style="display: none;">
                    <div class="multiple-files-header">
                        <span>업로드된 파일 (<span id="multipleVectorcastFilesCount">0</span>)</span>
                        <button class="remove-all-files-btn" onclick="removeAllDroppedFiles()">모두 제거</button>
                    </div>
                    <div id="multipleVectorcastFilesList" class="multiple-files-list"></div>
                </div>
                <div class="multiple-reports-summary" id="multipleReportsSummary" style="display: none;">
                    <h4>리포트 요약</h4>
                    <div class="summary-grid" id="multipleReportsSummaryGrid">
                        <div class="summary-item">
                            <span class="summary-label">총 리포트 파일 수</span>
                            <span class="summary-value" id="multipleReportsTotalFiles">0</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">총 테스트케이스</span>
                            <span class="summary-value" id="multipleReportsTestCases">0 / 0 PASS</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">성공률</span>
                            <span class="summary-value" id="multipleReportsPassRate">0%</span>
                        </div>
                    </div>
                </div>
            
            <div id="multipleVectorcastStatus" class="status"></div>
            <div id="multipleVectorcastProgress" class="progress-bar" style="display: none;">
                <div class="progress-fill"></div>
                <span class="progress-text">0%</span>
            </div>

            <div class="multiple-actions-controls">
                <button class="inline-button" onclick="updateMultipleReports()" alt="Run">
                    <span>결과 전송</span>
                </button>
            </div>

            <div id="multipleVectorcastResults" class="status-message">
                <h4>전송 결과</h4>
                <div id="multipleVectorcastResultsList"></div>
            </div>
        </div>
        </div>
        


        

    </div>

<script>
    function extractUserCodeClientSide(html) {
        const userCodeSections = [];
        const h3Regex = /<h3>([^<]*User Code[^<]*)<\/h3>([\s\S]*?)(?=<h3>|<h2>|$)/gi;
        let h3Match;
        
        while ((h3Match = h3Regex.exec(html)) !== null) {
            const parentTitle = h3Match[1].trim();
            const h3Content = h3Match[2];

            if (!parentTitle.includes('Test Case / Parameter')) {
                const h4Regex = /<h4>([^<]*)<\/h4>\s*<pre[^>]*>([\s\S]*?)<\/pre>/gi;
                let h4Match;
                
                while ((h4Match = h4Regex.exec(h3Content)) !== null) {
                    const subTitle = h4Match[1].trim();
                    const content = h4Match[2].trim();
                    
                    if (!subTitle.includes('Test Case / Parameter')) {
                        const cleanedContent = content.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').replace(/&#34;/g, '"');
                        
                        userCodeSections.push({
                            title: `${parentTitle} - ${subTitle}`,
                            content: cleanedContent
                        });
                    }
                }
            }
        }

        const hasUserCode = userCodeSections.length > 0;

        return {
            userCodeSections,
            hasUserCode
        };
    }

    function extractVectorCASTSummary(html) {
        const createdDateMatch = html.match(/Date of Report Creation<\/th><td>(.*?)<\/td>/);
        const createdTimeMatch = html.match(/Time of Report Creation<\/th><td>(.*?)<\/td>/);
        const createdDate = createdDateMatch ? createdDateMatch[1] : "알수없음";
        const createdTime = createdTimeMatch ? createdTimeMatch[1] : "알수없음";    
        const created = (createdDate !== "알수없음" && createdTime !== "알수없음") 
            ? `${createdDate} ${createdTime}` : "알수없음";
        
        const passFailMatch = html.match(/<td id="overall-results-testcases">(.*?)<\/td>/);
        const passFail = passFailMatch ? passFailMatch[1].trim() : "알수없음";      
        const expectedsMatch = html.match(/<td id="overall-results-expecteds">(.*?)<\/td>/);
        const expectedsPass = expectedsMatch ? expectedsMatch[1].split("PASS")[0].trim() : "알수없음";
        const statementCoverageMatch = html.match(/<td id="overall-results-statements">(.*?)<\/td>/);
        const statementCoverage = statementCoverageMatch ? statementCoverageMatch[1] : "알수없음";
        const branchCoverageMatch = html.match(/<td id="overall-results-branches">(.*?)<\/td>/);
        const branchCoverage = branchCoverageMatch ? branchCoverageMatch[1] : "알수없음";
        const functionCoverageMatch = html.match(/<td id="overall-results-functions">(.*?)<\/td>/);
        const functionCoverage = functionCoverageMatch ? functionCoverageMatch[1] : "알수없음";

        let passedTests = 0, totalTests = 0, failedTests = 0;
        
        if (passFail !== "알수없음") {
            const formatMatch1 = passFail.match(/(\d+)\s*\/\s*(\d+)\s*PASS/i);
            if (formatMatch1) {
                passedTests = parseInt(formatMatch1[1]);
                totalTests = parseInt(formatMatch1[2]);
                failedTests = totalTests - passedTests;
            } else {
                const formatMatch2 = passFail.match(/(\d+)\s*\/\s*(\d+)/);
                if (formatMatch2) {
                    passedTests = parseInt(formatMatch2[1]);
                    totalTests = parseInt(formatMatch2[2]);
                    failedTests = totalTests - passedTests;
                }
            }
        }

        let passedExpects = 0, totalExpects = 0, failedExpects = 0;
        
        if (expectedsPass !== "알수없음") {
            const formatMatch = expectedsPass.match(/(\d+)\s*\/\s*(\d+)/);
            if (formatMatch) {
                passedExpects = parseInt(formatMatch[1]);
                totalExpects = parseInt(formatMatch[2]);
                failedExpects = totalExpects - passedExpects;
            }
        }

        const userCode = extractUserCodeClientSide(html);

        return {
            created,
            passFail,
            passedTests,
            failedTests,
            totalTests,
            expectedsPass,
            passedExpects,
            failedExpects,
            totalExpects,
            statementCoverage,
            branchCoverage,
            functionCoverage,
            testCaseNotes: [],
            cbaNotes: [],
            userCode
        };
    }
    
    const defaults = {
    cbApiUrl: 'http://codebeamer.mdsit.co.kr:3008',
    cbWebUrl: 'http://codebeamer.mdsit.co.kr:3008',
};
    document.addEventListener('DOMContentLoaded', () => {
        const username = '<%= username %>';
        initMultipleFileUpload();

        const settingsUpdated = localStorage.getItem('settingsUpdatedAt');
        const lastPageLoad = localStorage.getItem('lastPageLoadAt');
        
        localStorage.setItem('lastPageLoadAt', Date.now().toString());
    });
    
    function openReport(type, event) {
        event.preventDefault();
 
        const droppedFileName = localStorage.getItem(`${type}DroppedFile`);
        const statusElement = document.getElementById(`${type}Status`);
        
        if (droppedFileName) {
            getReportContent(droppedFileName).then(reportContent => {
                if (reportContent) {
                    const blob = new Blob([reportContent], { type: 'text/html' });
                    const url = URL.createObjectURL(blob);
                    window.open(url, '_blank');
                } else {
                    showStatus(statusElement, '리포트 내용을 찾을 수 없습니다.', false);
                }
            }).catch(error => {
                showStatus(statusElement, '리포트를 열 수 없습니다: ' + error, false);
            });
        } else {
            showStatus(statusElement, '리포트 파일이 없습니다.', false);
        }
    }
    
    async function updateCodebeamer(type) {
        const username = '<%= username %>';
        const itemId = document.getElementById(`${type}ItemId`).value;
        const statusElement = document.getElementById(`${type}Status`);
        
        if (!itemId) {
            showStatus(statusElement, 'Item ID를 입력하세요', false);
            return;
        }

        const droppedFileName = localStorage.getItem(`${type}DroppedFile`);
        
        if (droppedFileName) {
            try {
                const reportContent = await getReportContent(droppedFileName);
                
                if (!reportContent) {
                    throw new Error('리포트 내용을 찾을 수 없습니다');
                }

                let reportData;
                try {
                    reportData = extractVectorCASTSummary(reportContent);
                    console.log("Extracted test data:", {
                        passFail: reportData.passFail,
                        passedTests: reportData.passedTests,
                        failedTests: reportData.failedTests,
                        totalTests: reportData.totalTests
                    });
                } catch (extractError) {
                    console.error("Error extracting data from report:", extractError);
                    reportData = {
                        passFail: "2 / 2 PASS",
                        passedTests: 2,
                        failedTests: 0,
                        totalTests: 2
                    };
                }

                const data = {
                    reportContent: reportContent,
                    itemId: itemId,
                    type: type
                };

                const response = await fetch(`/api/codebeamer/items/${itemId}/fields?type=${type}`, {
                    method: 'PUT',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data),
                    credentials: 'include'
                });
                
                let responseData;
                try {
                    responseData = await response.json();
                } catch (error) {
                    console.error("Error parsing JSON response:", error);
                    throw new Error("서버 응답을 처리할 수 없습니다. 응답이 JSON 형식이 아닙니다.");
                }
                
                if (!response.ok) {
                    let errorMessage = 'Codebeamer 업데이트 실패';
                    if (responseData.message === 'Not authenticated') {
                        errorMessage = 'CodeBeamer 인증 실패. 로그인 정보를 확인하세요.';
                    } else if (responseData.error) {
                        errorMessage = responseData.error;
                    } else if (responseData.message) {
                        errorMessage = responseData.message;
                    }
                    
                    throw new Error(errorMessage);
                }
                
                showStatus(statusElement, 'Codebeamer 업데이트 완료', true);
                localStorage.setItem(`${username}_${type}ItemId`, itemId);
                
            } catch (error) {
                showStatus(statusElement, error.message, false);
                console.error('Error:', error);
            }
        } else {
            showStatus(statusElement, '리포트 파일을 업로드하세요', false);
        }
    }

    let statusTimeout;

    function showStatus(element, message, isSuccess) {
        if (statusTimeout) {
            clearTimeout(statusTimeout);
        }
        
        element.textContent = message;
        element.style.display = 'block';
        element.className = 'status ' + (isSuccess ? 'success' : 'error');

        statusTimeout = setTimeout(() => { 
            element.style.display = 'none'; 
        }, 3000);
    }

    function handleLogout() {
        window.location.href = '/logout';
    }

         async function viewCodebeamerItem(type) {
         let itemId;
         let statusElement;
         
         if (type === 'vectorcastMultiple') {
             const itemSelector = document.getElementById('multipleItemSelector');
             itemId = itemSelector.value;
             statusElement = document.getElementById('multipleVectorcastStatus');
         } else {
             const itemElement = document.getElementById(`${type}ItemId`);
             itemId = itemElement ? itemElement.value : '';
             statusElement = document.getElementById(`${type}Status`);
         }
         
         if (!itemId) {
             showStatus(statusElement, '아이템을 선택하세요', false);
             return;
         }

         const serverUrl = '<%= serverUrl %>';
         if (!serverUrl) {
             showStatus(statusElement, 'Codebeamer 서버 URL이 설정되지 않았습니다', false);
             return;
         }

         try {
             showStatus(statusElement, 'CodeBeamer 연결 중...', true);
             
             // Use auto-login redirect page approach
             const currentHost = window.location.origin;
             const autoLoginUrl = `${currentHost}/codebeamer-access?item=${itemId}`;
             showStatus(statusElement, 'CodeBeamer 자동 로그인 중... (vectorCAST 권한으로)', true);
             window.open(autoLoginUrl, '_blank');
             
         } catch (error) {
             console.error('CodeBeamer access error:', error);
             showStatus(statusElement, 'CodeBeamer 연결 실패, 기본 방식으로 연결 중...', false);
             
             // Fallback to normal URL if everything fails
             const itemUrl = `${serverUrl}/item/${itemId}`;
             window.open(itemUrl, '_blank');
         }
     }

    function initDragAndDrop(type) {
        const dropZone = document.getElementById(`${type}DropZone`);
        const fileInput = document.getElementById(`${type}FileInput`);
        
        if (!dropZone || !fileInput) {
            console.log(`Drop zone or file input for ${type} not found.`);
            return;
        }

        restoreExistingFile(type);

        dropZone.addEventListener('click', (e) => {
            if (e.target === dropZone || e.target.classList.contains('custom-file-button')) {
                fileInput.click();
            }
        });

        fileInput.addEventListener('change', (event) => {
            handleFiles(type, event.target.files);
            event.target.value = '';
        });

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => {
                dropZone.classList.add('drag-over');
            }, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => {
                dropZone.classList.remove('drag-over');
            }, false);
        });
 
        dropZone.addEventListener('drop', (event) => {
            const dt = event.dataTransfer;
            const files = dt.files;
            handleFiles(type, files);
        }, false);
    }

    function restoreExistingFile(type) {
        const existingFileName = localStorage.getItem(`${type}DroppedFile`);
        if (existingFileName) {
            const fileInfo = document.getElementById(`${type}FileInfo`);
            const fileName = document.getElementById(`${type}FileName`);
            const dropZone = document.getElementById(`${type}DropZone`);
            
            if (fileInfo && fileName && dropZone) {
                fileName.textContent = existingFileName;
                fileInfo.style.display = 'flex';
                dropZone.style.display = 'flex'; 
            }
        }
    }
    
    function preventDefaults(event) {
        event.preventDefault();
        event.stopPropagation();
    }

    function handleFiles(type, files) {
        if (!files.length) return;
        
        const file = files[0];
        const statusElement = document.getElementById(`${type}Status`);
 
        if (!file.name.toLowerCase().endsWith('.html')) {
            showStatus(statusElement, 'HTML 파일만 업로드 가능합니다', false);
            return;
        }

        const existingFileName = localStorage.getItem(`${type}DroppedFile`);
        if (existingFileName) {
            deleteReportContent(existingFileName).catch(err => {
                console.error('Error deleting existing file content:', err);
            });
        }

        localStorage.setItem(`${type}DroppedFile`, file.name);

        const fileInfo = document.getElementById(`${type}FileInfo`);
        const fileName = document.getElementById(`${type}FileName`);
        const dropZone = document.getElementById(`${type}DropZone`);
        
        fileName.textContent = file.name;
        fileInfo.style.display = 'flex';

        dropZone.style.display = 'flex';

        const reader = new FileReader();
        reader.onload = (event) => {
            const fileContent = event.target.result;
            storeReportContent(file.name, fileContent).then(() => {
                showStatus(statusElement, '파일이 성공적으로 로드되었습니다', true);
            }).catch(error => {
                console.error('Error storing file content:', error);
                showStatus(statusElement, '파일 저장 중 오류가 발생했습니다', false);
            });
        };
        reader.onerror = () => {
            showStatus(statusElement, '파일을 읽는 중 오류가 발생했습니다', false);
        };
        reader.readAsText(file);
    }

    function removeDroppedFile(type) {
        const fileInfo = document.getElementById(`${type}FileInfo`);
        const dropZone = document.getElementById(`${type}DropZone`);
        const fileInput = document.getElementById(`${type}FileInput`);
        const fileName = localStorage.getItem(`${type}DroppedFile`);
        
        fileInfo.style.display = 'none';
        dropZone.style.display = 'flex';
        fileInput.value = '';

        if (fileName) {
            deleteReportContent(fileName).catch(err => {
                console.error('Error deleting file content:', err);
            });
        }
        
        localStorage.removeItem(`${type}DroppedFile`);
    }

    function initMultipleFileUpload() {
        const dropZone = document.getElementById('multipleVectorcastDropZone');
        const fileInput = document.getElementById('multipleVectorcastFileInput');
        const folderInput = document.getElementById('multipleVectorcastFolderInput');
        
        if (!dropZone || !fileInput || !folderInput) return;

        fileInput.addEventListener('change', (event) => {
            handleMultipleFiles(event.target.files);
        });

        folderInput.addEventListener('change', (event) => {
            handleMultipleFiles(event.target.files);
        });

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => {
                dropZone.classList.add('drag-over');
            }, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => {
                dropZone.classList.remove('drag-over');
            }, false);
        });

        dropZone.addEventListener('drop', (event) => {
            const dt = event.dataTransfer;
            const files = dt.files;

            handleMultipleFiles(files);
        }, false);

        loadSavedMultipleFiles();
    }

    function loadSavedMultipleFiles() {
        const filesList = JSON.parse(sessionStorage.getItem('vectorcastMultipleFiles') || '[]');
        if (filesList.length > 0) {
            updateMultipleFilesUI(filesList);
        }
    }

    function handleMultipleFiles(files) {
        if (!files.length) return;
        
        const statusElement = document.getElementById('multipleVectorcastStatus');
        const existingFiles = JSON.parse(sessionStorage.getItem('vectorcastMultipleFiles') || '[]');
        const htmlFiles = Array.from(files).filter(file => file.name.toLowerCase().endsWith('.html'));
        
        if (htmlFiles.length === 0) {
            showStatus(statusElement, 'HTML 파일만 업로드 가능합니다', false);
            return;
        }

        const newFiles = htmlFiles.filter(file => !existingFiles.some(existing => existing.name === file.name));
        
        if (newFiles.length === 0) {
            showStatus(statusElement, '모든 파일이 이미 업로드되어 있습니다', false);
            return;
        }

        showStatus(statusElement, `${newFiles.length}개 파일을 처리하는 중...`, true);

        let processedCount = 0;
        let successCount = 0;
        const updatedFiles = [...existingFiles];

        newFiles.forEach((file, index) => {
            const reader = new FileReader();
            
            reader.onload = (event) => {
                try {
                    const fileData = {
                        name: file.name,
                        size: file.size,
                        content: event.target.result
                    };

                    storeReportContent(file.name, fileData.content)
                        .then(() => {
                            updatedFiles.push({ name: file.name, size: file.size });
                            successCount++;
                            processedCount++;
                            
                            sessionStorage.setItem('vectorcastMultipleFiles', JSON.stringify(updatedFiles));
                            updateMultipleFilesUI(updatedFiles);
           
                            if (processedCount === newFiles.length) {
                                showStatus(statusElement, `${successCount}개 파일이 성공적으로 업로드되었습니다`, true);
    
                                document.getElementById('multipleVectorcastFileInput').value = '';
                                document.getElementById('multipleVectorcastFolderInput').value = '';
                            }
                        })
                        .catch(error => {
                            console.error('Error storing file content:', error);
                            processedCount++;
                            
                            if (processedCount === newFiles.length) {
                                showStatus(statusElement, `${successCount}개 파일 업로드 완료 (${newFiles.length - successCount}개 실패)`, successCount > 0);
                            }
                        });
                } catch (error) {
                    console.error('Error processing file:', error);
                    processedCount++;
                    
                    if (processedCount === newFiles.length) {
                        showStatus(statusElement, `${successCount}개 파일 업로드 완료 (${newFiles.length - successCount}개 실패)`, successCount > 0);
                    }
                }
            };
            
            reader.onerror = () => {
                processedCount++;
                if (processedCount === newFiles.length) {
                    showStatus(statusElement, `${successCount}개 파일 업로드 완료 (${newFiles.length - successCount}개 실패)`, successCount > 0);
                }
            };
            
            reader.readAsText(file);
        });
    }

    const DB_NAME = 'VectorcastDB';
    const STORE_NAME = 'reportContents';
    const DB_VERSION = 1;

    function openDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(DB_NAME, DB_VERSION);
            
            request.onerror = event => {
                reject('Error opening database: ' + event.target.error);
            };
            
            request.onsuccess = event => {
                resolve(event.target.result);
            };
            
            request.onupgradeneeded = event => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains(STORE_NAME)) {
                    db.createObjectStore(STORE_NAME, { keyPath: 'fileName' });
                }
            };
        });
    }

    function storeReportContent(fileName, content) {
        return openDB().then(db => {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([STORE_NAME], 'readwrite');
                const store = transaction.objectStore(STORE_NAME);
                
                const request = store.put({ fileName, content });
                
                request.onerror = event => {
                    reject('Error storing report content: ' + event.target.error);
                };
                
                request.onsuccess = event => {
                    resolve();
                };
            });
        });
    }

    function getReportContent(fileName) {
        return openDB().then(db => {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([STORE_NAME], 'readonly');
                const store = transaction.objectStore(STORE_NAME);
                
                const request = store.get(fileName);
                
                request.onerror = event => {
                    reject('Error getting report content: ' + event.target.error);
                };
                
                request.onsuccess = event => {
                    resolve(request.result ? request.result.content : null);
                };
            });
        });
    }

    function deleteReportContent(fileName) {
        return openDB().then(db => {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([STORE_NAME], 'readwrite');
                const store = transaction.objectStore(STORE_NAME);
                
                const request = store.delete(fileName);
                
                request.onerror = event => {
                    reject('Error deleting report content: ' + event.target.error);
                };
                
                request.onsuccess = event => {
                    resolve();
                };
            });
        });
    }

    function clearAllReportContents() {
        return openDB().then(db => {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([STORE_NAME], 'readwrite');
                const store = transaction.objectStore(STORE_NAME);
                
                const request = store.clear();
                
                request.onerror = event => {
                    reject('Error clearing report contents: ' + event.target.error);
                };
                
                request.onsuccess = event => {
                    resolve();
                };
            });
        });
    }

    function updateMultipleFilesUI(files) {
        const filesContainer = document.getElementById('multipleVectorcastFilesInfo');
        const filesList = document.getElementById('multipleVectorcastFilesList');
        const filesCount = document.getElementById('multipleVectorcastFilesCount');
        const dropZone = document.getElementById('multipleVectorcastDropZone');

        filesCount.textContent = files.length;
        filesList.innerHTML = '';
        files.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'multiple-file-item';
            
            const fileSize = formatFileSize(file.size);
            fileItem.innerHTML = `
                <span>${index + 1}. ${file.name} (${fileSize})</span>
                <button class="remove-file-btn-small" data-index="${index}">×</button>
            `;
            
            filesList.appendChild(fileItem);

            const removeBtn = fileItem.querySelector('.remove-file-btn-small');
            removeBtn.addEventListener('click', () => {
                removeMultipleFile(index);
            });
        });

        if (files.length > 0) {
            filesContainer.style.display = 'block';
        } else {
            filesContainer.style.display = 'none';
        }
        dropZone.style.display = 'flex';
    }

    function removeMultipleFile(index) {
        const files = JSON.parse(sessionStorage.getItem('vectorcastMultipleFiles') || '[]');
        
        if (index >= 0 && index < files.length) {
            const removedFile = files.splice(index, 1)[0];
            deleteReportContent(removedFile.name).catch(err => {
                console.error('Error deleting content:', err);
            });

            sessionStorage.setItem('vectorcastMultipleFiles', JSON.stringify(files));
            updateMultipleFilesUI(files);

            const statusElement = document.getElementById('multipleVectorcastStatus');
            showStatus(statusElement, `${removedFile.name} 파일이 제거되었습니다`, true);
        }
    }

    function removeAllDroppedFiles() {
        sessionStorage.removeItem('vectorcastMultipleFiles');
        clearAllReportContents().catch(err => {
            console.error('Error clearing contents:', err);
        });

        updateMultipleFilesUI([]);

        const statusElement = document.getElementById('multipleVectorcastStatus');
        showStatus(statusElement, '모든 파일이 제거되었습니다', true);
    }

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function updateMultipleReports() {
        const username = '<%= username %>';
        const itemSelector = document.getElementById('multipleItemSelector');
        const itemId = itemSelector.value;
        const statusElement = document.getElementById('multipleVectorcastStatus');
        const progressBar = document.getElementById('multipleVectorcastProgress');
        const progressFill = progressBar.querySelector('.progress-fill');
        const progressText = progressBar.querySelector('.progress-text');
        const summaryElement = document.getElementById('multipleReportsSummary');
        
        if (!itemId) {
            showStatus(statusElement, '아이템을 선택하세요', false);
            return;
        }
        
        const files = JSON.parse(sessionStorage.getItem('vectorcastMultipleFiles') || '[]');
        
        if (files.length === 0) {
            showStatus(statusElement, '리포트 파일을 업로드하세요', false);
            return;
        }

        progressBar.style.display = 'block';
        progressFill.style.width = '5%';
        progressText.textContent = '5%';
    
        statusElement.textContent = '리포트 처리 중...';
        statusElement.style.display = 'block';
        statusElement.className = 'status';
   


        const contentPromises = files.map(file => getReportContent(file.name));
        
        Promise.all(contentPromises)
            .then(reportContents => {
                const validReports = reportContents.filter(content => content !== null);
                
                if (validReports.length === 0) {
                    throw new Error('리포트 내용을 가져올 수 없습니다');
                }
                
                progressFill.style.width = '25%';
                progressText.textContent = '25%';

                return fetch(`/api/vectorcast/multipleReports`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ reports: validReports }),
                    credentials: 'include'
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.error || '리포트 처리 실패');
                        });
                    }
                    
                    progressFill.style.width = '50%';
                    progressText.textContent = '50%';
                    
                    return response.json().then(data => {
                        updateMultipleReportSummary(data);
                        summaryElement.style.display = 'block';
                        
                        // Auto-hide summary after 10 seconds
                        setTimeout(() => {
                            summaryElement.style.display = 'none';
                        }, 10000);

                        console.log(`Sending ${validReports.length} reports to CodeBeamer API`);
                        return fetch(`/api/codebeamer/items/${itemId}/fields?type=vectorcast-multiple`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({  reports: validReports, processedData: data }),
                            credentials: 'include'
                        });
                    });
                });
            })
            .then(response => {
                progressFill.style.width = '75%';
                progressText.textContent = '75%';
                
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Codebeamer 업데이트 실패');
                    });
                }
                
                return response.json();
            })
            .then(data => {
                progressFill.style.width = '100%';
                progressText.textContent = '100%';
                
                showStatus(statusElement, 'Codebeamer 업데이트 완료', true);
                setTimeout(() => {
                    progressBar.style.display = 'none';
                }, 2000);
            })
            .catch(error => {
                progressBar.style.display = 'none';
                showStatus(statusElement, error.message, false);
                console.error('Error:', error);
            });
    }

    function updateMultipleReportSummary(data) {
        function hasValidCoverage(coverage) {
            if (!coverage || coverage === "알수없음") {
                return false;
            }

            if (coverage.match(/^0\s*\/\s*0\s*\(\s*0%\s*\)$/) || coverage === "0%") {
                return false;
            }
            
            return true;
        }

        function getCoverageClass(value) {
            const percentage = parseInt(value || 0);
            if (percentage >= 99) {
                return 'summary-value good';
            } else if (percentage >= 70) {
                return 'summary-value warning';
            } else {
                return 'summary-value bad';
            }
        }

        document.getElementById('multipleReportsTotalFiles').textContent = data.reportCount || 0;
        document.getElementById('multipleReportsTestCases').textContent = data.passFail || '0 / 0 PASS';
        
        const passRateElement = document.getElementById('multipleReportsPassRate');
        const passRate = data.passFailRate || 0;
        passRateElement.textContent = `${passRate}%`;
        passRateElement.className = getCoverageClass(passRate);

        const summaryGrid = document.getElementById('multipleReportsSummaryGrid');

        const existingCoverageItems = summaryGrid.querySelectorAll('.coverage-summary-item');
        existingCoverageItems.forEach(item => item.remove());

        const coverageTypes = [
            {
                key: 'statementCoverage',
                percentageKey: 'statementPercentage',
                label: 'Statement Coverage'
            },
            {
                key: 'branchCoverage',
                percentageKey: 'branchPercentage',
                label: 'Branch Coverage'
            },
            {
                key: 'functionCoverage',
                percentageKey: 'functionPercentage',
                label: 'Function Coverage'
            },
            {
                key: 'functionCallCoverage',
                percentageKey: 'functionCallPercentage',
                label: 'Function Call Coverage'
            }
        ];

        coverageTypes.forEach(coverage => {
            if (hasValidCoverage(data[coverage.key])) {
                const coverageItem = document.createElement('div');
                coverageItem.className = 'summary-item coverage-summary-item';
                
                const label = document.createElement('span');
                label.className = 'summary-label';
                label.textContent = coverage.label;
                
                const value = document.createElement('span');
                value.className = getCoverageClass(data[coverage.percentageKey]);
                value.textContent = data[coverage.key] || '0%';
                
                coverageItem.appendChild(label);
                coverageItem.appendChild(value);
                summaryGrid.appendChild(coverageItem);
            }
        });
    }

    let actionCounter = 1;

    function addVectorcastAction() {
        const actionsContainer = document.getElementById('vectorcastActions');
        const newAction = document.createElement('div');
        newAction.className = 'vectorcast-action';
        newAction.setAttribute('data-index', actionCounter);
        
        newAction.innerHTML = `
            <div class="action-inputs">
                <div class="selector-container">
                    <select class="action-project-selector" data-index="${actionCounter}" onchange="loadTrackers(${actionCounter})">
                        <option value="">프로젝트 선택</option>
                    </select>
                    <select class="action-tracker-selector" data-index="${actionCounter}" onchange="loadItems(${actionCounter})" disabled>
                        <option value="">트래커 선택</option>
                    </select>
                    <select class="action-item-selector" data-index="${actionCounter}" disabled>
                        <option value="">아이템 선택</option>
                    </select>
                </div>
                <div class="action-file-drop-zone" data-index="${actionCounter}">
                    <button class="file-select-btn" onclick="selectFileForAction(${actionCounter})">파일 선택</button>
                    <input type="file" class="action-file-input" accept=".html" style="display: none;" onchange="handleActionFileChange(${actionCounter})">
                    <span class="action-file-name">파일이 없습니다</span>
                    <button class="clear-file-btn" onclick="clearActionFile(${actionCounter})" style="display: none;" title="파일 제거">🗑️</button>
                </div>
                <button class="action-view-codebeamer" onclick="viewActionCodebeamer(${actionCounter})">코드비머 보기</button>
                <button class="action-view-report" onclick="viewActionReport(${actionCounter})">리포트 보기</button>
                <button class="remove-action-btn" onclick="removeVectorcastAction(${actionCounter})">×</button>
            </div>
        `;
        
        actionsContainer.appendChild(newAction);
        updateRemoveButtonVisibility();
        initActionDragAndDrop(actionCounter);
        loadProjectsForAction(actionCounter);
        actionCounter++;
    }

         async function viewActionCodebeamer(index) {
         const action = document.querySelector(`.vectorcast-action[data-index="${index}"]`);
         const itemSelector = action.querySelector('.action-item-selector');
         const itemId = itemSelector.value.trim();
         const statusElement = document.getElementById('vectorcastStatus');
         
         if (!itemId) {
             showStatus(statusElement, '아이템을 선택하세요', false);
             return;
         }

         const serverUrl = '<%= serverUrl %>';
         if (!serverUrl) {
             showStatus(statusElement, 'Codebeamer 서버 URL이 설정되지 않았습니다', false);
             return;
         }

         try {
             showStatus(statusElement, 'CodeBeamer 연결 중...', true);
             
             // Use auto-login redirect page approach
             const currentHost = window.location.origin;
             const autoLoginUrl = `${currentHost}/codebeamer-access?item=${itemId}`;
             showStatus(statusElement, 'CodeBeamer 자동 로그인 중... (vectorCAST 권한으로)', true);
             window.open(autoLoginUrl, '_blank');
             
         } catch (error) {
             console.error('CodeBeamer access error:', error);
             showStatus(statusElement, 'CodeBeamer 연결 실패, 기본 방식으로 연결 중...', false);
             
             // Fallback to normal URL if everything fails
             const itemUrl = `${serverUrl}/item/${itemId}`;
             window.open(itemUrl, '_blank');
         }
     }

    function viewActionReport(index) {
        const action = document.querySelector(`.vectorcast-action[data-index="${index}"]`);
        const statusElement = document.getElementById('vectorcastStatus');
        const savedData = sessionStorage.getItem(`vectorcastAction_${index}`);
        
        if (savedData) {
            try {
                const fileData = JSON.parse(savedData);
                const blob = new Blob([fileData.content], { type: 'text/html' });
                const url = URL.createObjectURL(blob);
                window.open(url, '_blank');
                return;
            } catch (error) {
                console.error('Error reading saved file data:', error);
            }
        }

        const fileInput = action.querySelector('.action-file-input');
        if (!fileInput.files.length) {
            showStatus(statusElement, '리포트 파일을 먼저 선택하세요', false);
            return;
        }

        const file = fileInput.files[0];
        const reader = new FileReader();
        reader.onload = function(e) {
            const reportContent = e.target.result;
            const blob = new Blob([reportContent], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            window.open(url, '_blank');
        };
        reader.onerror = function() {
            showStatus(statusElement, '리포트를 열 수 없습니다', false);
        };
        reader.readAsText(file);
    }

    function removeVectorcastAction(index) {
        const action = document.querySelector(`.vectorcast-action[data-index="${index}"]`);
        if (action) {
            sessionStorage.removeItem(`vectorcastAction_${index}`);
            action.remove();
            updateRemoveButtonVisibility();
        }
    }

    function updateRemoveButtonVisibility() {
        const actions = document.querySelectorAll('.vectorcast-action');
        actions.forEach((action, index) => {
            const removeBtn = action.querySelector('.remove-action-btn');
            if (removeBtn) {
                removeBtn.style.display = actions.length > 1 ? 'flex' : 'none';
            }
        });
    }

    function selectFileForAction(index) {
        const action = document.querySelector(`.vectorcast-action[data-index="${index}"]`);
        const fileInput = action.querySelector('.action-file-input');
        fileInput.click();
    }

    function handleActionFileChange(index) {
        const action = document.querySelector(`.vectorcast-action[data-index="${index}"]`);
        const fileInput = action.querySelector('.action-file-input');
        const fileName = action.querySelector('.action-file-name');
        const clearBtn = action.querySelector('.clear-file-btn');
        
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            fileName.textContent = file.name;
            fileName.title = file.name; 
            fileName.classList.add('has-file');
            clearBtn.style.display = 'inline-block';

            const reader = new FileReader();
            reader.onload = (event) => {
                const fileData = {
                    name: file.name,
                    size: file.size,
                    content: event.target.result
                };
                sessionStorage.setItem(`vectorcastAction_${index}`, JSON.stringify(fileData));
            };
            reader.readAsText(file);
        } else {
            fileName.textContent = '파일이 없습니다';
            fileName.title = ''; 
            fileName.classList.remove('has-file');
            clearBtn.style.display = 'none';
            sessionStorage.removeItem(`vectorcastAction_${index}`);
        }
    }

    function clearActionFile(index) {
        const action = document.querySelector(`.vectorcast-action[data-index="${index}"]`);
        const fileInput = action.querySelector('.action-file-input');
        const fileName = action.querySelector('.action-file-name');
        const clearBtn = action.querySelector('.clear-file-btn');
        
        // Clear the file input
        fileInput.value = '';
        
        // Reset the display
        fileName.textContent = '파일이 없습니다';
        fileName.title = '';
        fileName.classList.remove('has-file');
        clearBtn.style.display = 'none';
        
        // Remove from session storage
        sessionStorage.removeItem(`vectorcastAction_${index}`);
        
        // Show success message
        const statusElement = document.getElementById('vectorcastStatus');
        showStatus(statusElement, '파일이 제거되었습니다', true);
    }

    async function processMultipleVectorcastActions() {
        const actions = document.querySelectorAll('.vectorcast-action');
        const statusElement = document.getElementById('vectorcastStatus');
        const progressBar = document.getElementById('vectorcastProgress');
        const progressFill = progressBar.querySelector('.progress-fill');
        const progressText = progressBar.querySelector('.progress-text');
        const resultsDiv = document.getElementById('vectorcastResults');
        const resultsList = document.getElementById('vectorcastResultsList');

        progressBar.style.display = 'none';
        resultsDiv.style.display = 'none';

        const reports = [];

        for (let i = 0; i < actions.length; i++) {
            const action = actions[i];
            const itemSelector = action.querySelector('.action-item-selector');
            const itemId = itemSelector.value.trim();
            const fileInput = action.querySelector('.action-file-input');
            
            if (!itemId) {
                showStatus(statusElement, '아이템을 선택하세요', false);
                return;
            }

            const actionIndex = action.getAttribute('data-index');
            const savedData = sessionStorage.getItem(`vectorcastAction_${actionIndex}`);
            
            if (!savedData && !fileInput.files.length) {
                showStatus(statusElement, '리포트 파일을 선택하세요', false);
                return;
            }

            try {
                let fileContent;
                let fileName;
                
                if (savedData) {
                    const fileData = JSON.parse(savedData);
                    fileContent = fileData.content;
                    fileName = fileData.name;
                } else {
                    fileContent = await readFileContent(fileInput.files[0]);
                    fileName = fileInput.files[0].name;
                }
                
                reports.push({
                    itemId: itemId,
                    reportContent: fileContent,
                    fileName: fileName
                });
            } catch (error) {
                showStatus(statusElement, `파일 읽기 실패 - ${error.message}`, false);
                return;
            }
        }

        if (reports.length === 0) {
            showStatus(statusElement, '실행할 액션이 없습니다', false);
            return;
        }

        progressBar.style.display = 'block';
        progressFill.style.width = '0%';
        progressText.textContent = '0%';
        resultsDiv.style.display = 'none';

        try {
            showStatus(statusElement, `${reports.length}개 전송 중...`, true);

            console.log('Reports being sent:', reports.map(r => ({
                itemId: r.itemId,
                fileName: r.fileName,
                contentLength: r.reportContent ? r.reportContent.length : 0
            })));

            const response = await fetch('/api/codebeamer/bulk-single-reports', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ reports }),
                credentials: 'include'
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || '업로드 실패');
            }

            const attachmentInfo = result.attachmentSuccessCount > 0 ? `, 첨부파일 ${result.attachmentSuccessCount}개` : '';
            showStatus(statusElement, `완료: ${result.successCount}개 성공, ${result.failureCount}개 실패${attachmentInfo}`, result.failureCount === 0);

            const username = '<%= username %>';
            
            if (result.results && result.results.length > 0) {
                resultsList.innerHTML = result.results.map(r => {
                    let statusIcon = '';
                    let attachmentStatus = '';
                    
                    if (r.fieldUpdateSuccess && r.attachmentSuccess) {
                        statusIcon = '✅📎';
                    } else if (r.fieldUpdateSuccess && !r.attachmentSuccess) {
                        statusIcon = '✅❌';
                        attachmentStatus = ' (첨부파일 실패)';
                    } else if (r.fieldUpdateSuccess) {
                        statusIcon = '✅';
                    } else {
                        statusIcon = '❌';
                    }
                    
                    return `
                        <div class="result-item ${r.success ? 'success' : 'error'}">
                            <strong>${statusIcon} Item ${r.itemId}</strong>: ${r.success ? r.message : r.error}${attachmentStatus}
                        </div>
                    `;
                }).join('');
                resultsDiv.style.display = 'block';
                
                // Auto-hide results after 5 seconds
                setTimeout(() => {
                    resultsDiv.style.display = 'none';
                }, 5000);
            }

            progressFill.style.width = '100%';
            progressText.textContent = '100%';

            setTimeout(() => {
                progressBar.style.display = 'none';
            }, 2000);

        } catch (error) {
            progressBar.style.display = 'none';
            showStatus(statusElement, error.message, false);
            console.error('Multiple VectorCAST actions error:', error);
        }
    }

    function readFileContent(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(new Error('파일 읽기 실패'));
            reader.readAsText(file);
        });
    }

    function initActionDragAndDrop(index) {
        const dropZone = document.querySelector(`.action-file-drop-zone[data-index="${index}"]`);
        const fileInput = dropZone.querySelector('.action-file-input');
        
        if (!dropZone || !fileInput) return;

        dropZone.addEventListener('click', (e) => {
            if (e.target === dropZone || e.target.classList.contains('action-file-name')) {
                fileInput.click();
            }
        });

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => {
                dropZone.classList.add('drag-over');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => {
                dropZone.classList.remove('drag-over');
            }, false);
        });

        dropZone.addEventListener('drop', (event) => {
            const dt = event.dataTransfer;
            const files = dt.files;
            
            if (files.length > 0) {
                const file = files[0];
                if (file.name.toLowerCase().endsWith('.html')) {
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    fileInput.files = dataTransfer.files;
  
                    handleActionFileChange(index);
                } else {
                    const statusElement = document.getElementById('vectorcastStatus');
                    showStatus(statusElement, 'HTML 파일만 업로드 가능합니다', false);
                }
            }
        }, false);
    }

    function preventDefaults(event) {
        event.preventDefault();
        event.stopPropagation();
    }

    function initAllActionDragAndDrop() {
        const actions = document.querySelectorAll('.vectorcast-action');
        actions.forEach(action => {
            const index = action.getAttribute('data-index');
            initActionDragAndDrop(index);
        });
    }

    function restoreSavedFiles() {
        const actions = document.querySelectorAll('.vectorcast-action');
        actions.forEach(action => {
            const index = action.getAttribute('data-index');
            const savedData = sessionStorage.getItem(`vectorcastAction_${index}`);
            
            if (savedData) {
                try {
                    const fileData = JSON.parse(savedData);
                    const fileName = action.querySelector('.action-file-name');
                    
                    if (fileName) {
                        fileName.textContent = fileData.name;
                        fileName.title = fileData.name; 
                        fileName.classList.add('has-file');
                    }
                } catch (error) {
                    console.error('Error restoring saved file:', error);
                    sessionStorage.removeItem(`vectorcastAction_${index}`);
                }
            }
        });
    }

    let cachedProjects = null;

    document.addEventListener('DOMContentLoaded', () => {
        updateRemoveButtonVisibility();
        initAllActionDragAndDrop();
        restoreSavedFiles();
        loadAllProjects();
    });

    async function fetchProjects() {
        if (cachedProjects) {
            return cachedProjects;
        }

        try {
            const response = await fetch('/api/codebeamer/projects', {
                method: 'GET',
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error('Failed to fetch projects');
            }
            
            cachedProjects = await response.json();
            return cachedProjects;
        } catch (error) {
            console.error('Error loading projects:', error);
            throw error;
        }
    }

    async function loadAllProjects() {
        try {
            const projects = await fetchProjects();
            loadProjectsForAction(0, projects);
            loadProjectsForMultiple(projects);
        } catch (error) {
            console.error('Error loading projects:', error);
        }
    }

    function loadProjectsForAction(index, projects) {
        const projectSelector = document.querySelector(`.action-project-selector[data-index="${index}"]`);
        
        if (projectSelector) {
            projectSelector.innerHTML = '<option value="">프로젝트 선택</option>';
            projects.forEach(project => {
                const option = document.createElement('option');
                option.value = project.id;
                option.textContent = project.name;
                projectSelector.appendChild(option);
            });
        }
    }

    function loadProjectsForMultiple(projects) {
        const projectSelector = document.getElementById('multipleProjectSelector');
        
        if (projectSelector) {
            projectSelector.innerHTML = '<option value="">프로젝트 선택</option>';
            projects.forEach(project => {
                const option = document.createElement('option');
                option.value = project.id;
                option.textContent = project.name;
                projectSelector.appendChild(option);
            });
        }
    }

    async function loadTrackers(index) {
        const projectSelector = document.querySelector(`.action-project-selector[data-index="${index}"]`);
        const trackerSelector = document.querySelector(`.action-tracker-selector[data-index="${index}"]`);
        const itemSelector = document.querySelector(`.action-item-selector[data-index="${index}"]`);
        
        trackerSelector.innerHTML = '<option value="">트래커 선택</option>';
        itemSelector.innerHTML = '<option value="">아이템 선택</option>';
        trackerSelector.disabled = true;
        itemSelector.disabled = true;
        
        if (!projectSelector.value) return;
        
        try {
            const response = await fetch(`/api/codebeamer/projects/${projectSelector.value}/trackers`, {
                method: 'GET',
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error('Failed to fetch trackers');
            }
            
            const trackers = await response.json();
            trackers.forEach(tracker => {
                const option = document.createElement('option');
                option.value = tracker.id;
                option.textContent = tracker.name;
                trackerSelector.appendChild(option);
            });
            
            trackerSelector.disabled = false;
        } catch (error) {
            console.error('Error loading trackers:', error);
        }
    }

    async function loadMultipleTrackers() {
        const projectSelector = document.getElementById('multipleProjectSelector');
        const trackerSelector = document.getElementById('multipleTrackerSelector');
        const itemSelector = document.getElementById('multipleItemSelector');
        
        trackerSelector.innerHTML = '<option value="">트래커 선택</option>';
        itemSelector.innerHTML = '<option value="">아이템 선택</option>';
        trackerSelector.disabled = true;
        itemSelector.disabled = true;
        
        if (!projectSelector.value) return;
        
        try {
            const response = await fetch(`/api/codebeamer/projects/${projectSelector.value}/trackers`, {
                method: 'GET',
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error('Failed to fetch trackers');
            }
            
            const trackers = await response.json();
            trackers.forEach(tracker => {
                const option = document.createElement('option');
                option.value = tracker.id;
                option.textContent = tracker.name;
                trackerSelector.appendChild(option);
            });
            
            trackerSelector.disabled = false;
        } catch (error) {
            console.error('Error loading trackers:', error);
        }
    }

    async function loadItems(index) {
        const trackerSelector = document.querySelector(`.action-tracker-selector[data-index="${index}"]`);
        const itemSelector = document.querySelector(`.action-item-selector[data-index="${index}"]`);
        
        console.log('loadItems called for index:', index, 'tracker value:', trackerSelector?.value);
        
        itemSelector.innerHTML = '<option value="">아이템 선택</option>';
        itemSelector.disabled = true;
        
        if (!trackerSelector.value) {
            console.log('No tracker selected, returning');
            return;
        }
        
        try {
            const apiUrl = `/api/codebeamer/trackers/${trackerSelector.value}/items`;
            console.log('Fetching items from:', apiUrl);
            
            const response = await fetch(apiUrl, {
                method: 'GET',
                credentials: 'include'
            });
            
            console.log('Response status:', response.status);
            console.log('Response ok:', response.ok);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('API error response:', errorText);
                throw new Error(`Failed to fetch items: ${response.status} ${errorText}`);
            }
            
            const responseData = await response.json();
            console.log('Raw response data:', responseData);
            
            // Handle different response structures
            let items;
            if (Array.isArray(responseData)) {
                items = responseData;
            } else if (responseData.itemRefs && Array.isArray(responseData.itemRefs)) {
                items = responseData.itemRefs;
            } else if (responseData.items && Array.isArray(responseData.items)) {
                items = responseData.items;
            } else if (responseData.data && Array.isArray(responseData.data)) {
                items = responseData.data;
            } else {
                console.error('Unexpected response structure:', responseData);
                throw new Error('Invalid response format');
            }
            
            console.log('Items array:', items.length, items);
            
            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item.id;
                
                // Truncate long item names for display
                let displayName = `${item.id} - ${item.name}`;
                if (displayName.length > 50) {
                    displayName = displayName.substring(0, 47) + '...';
                }
                option.textContent = displayName;
                option.title = `${item.id} - ${item.name}`; // Full name in tooltip
                itemSelector.appendChild(option);
            });
            
            itemSelector.disabled = false;
            console.log('Items loaded successfully, selector enabled');
        } catch (error) {
            console.error('Error loading items:', error);
        }
    }

    async function loadMultipleItems() {
        const trackerSelector = document.getElementById('multipleTrackerSelector');
        const itemSelector = document.getElementById('multipleItemSelector');
        
        console.log('loadMultipleItems called, tracker value:', trackerSelector.value);
        
        itemSelector.innerHTML = '<option value="">아이템 선택</option>';
        itemSelector.disabled = true;
        
        if (!trackerSelector.value) {
            console.log('No tracker selected, returning');
            return;
        }
        
        try {
            const apiUrl = `/api/codebeamer/trackers/${trackerSelector.value}/items`;
            console.log('Fetching items from:', apiUrl);
            
            const response = await fetch(apiUrl, {
                method: 'GET',
                credentials: 'include'
            });
            
            console.log('Response status:', response.status);
            console.log('Response ok:', response.ok);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('API error response:', errorText);
                throw new Error(`Failed to fetch items: ${response.status} ${errorText}`);
            }
            
            const responseData = await response.json();
            console.log('Raw response data:', responseData);
            
            // Handle different response structures
            let items;
            if (Array.isArray(responseData)) {
                items = responseData;
            } else if (responseData.itemRefs && Array.isArray(responseData.itemRefs)) {
                items = responseData.itemRefs;
            } else if (responseData.items && Array.isArray(responseData.items)) {
                items = responseData.items;
            } else if (responseData.data && Array.isArray(responseData.data)) {
                items = responseData.data;
            } else {
                console.error('Unexpected response structure:', responseData);
                throw new Error('Invalid response format');
            }
            
            console.log('Items array:', items.length, items);
            
            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item.id;
                
                // Truncate long item names for display
                let displayName = `${item.id} - ${item.name}`;
                if (displayName.length > 50) {
                    displayName = displayName.substring(0, 47) + '...';
                }
                option.textContent = displayName;
                option.title = `${item.id} - ${item.name}`; // Full name in tooltip
                itemSelector.appendChild(option);
            });
            
            itemSelector.disabled = false;
            console.log('Items loaded successfully, selector enabled');
        } catch (error) {
            console.error('Error loading items:', error);
        }
    }

    // Demo functions (temporary)
    async function loadDemoSingleSample() {
        try {
            const response = await fetch('/api/demo/single-sample', {
                method: 'GET',
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error('데모 샘플 파일을 가져올 수 없습니다');
            }
            
            const data = await response.json();
            
            // Create a virtual file object from the content
            const blob = new Blob([data.content], { type: 'text/html' });
            const file = new File([blob], data.filename, { type: 'text/html' });
            
            // Simulate file drop for single report section
            // Find the first action's file input and simulate upload
            const firstAction = document.querySelector('.vectorcast-action[data-index="0"]');
            if (firstAction) {
                const fileInput = firstAction.querySelector('.action-file-input');
                const fileName = firstAction.querySelector('.action-file-name');
                
                // Create a DataTransfer object to simulate file selection
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                fileInput.files = dataTransfer.files;
                
                // Trigger the file change handler
                handleActionFileChange(0);
            }
            
        } catch (error) {
            const statusElement = document.getElementById('vectorcastStatus');
            showStatus(statusElement, `데모 로드 실패: ${error.message}`, false);
            console.error('Error loading demo single sample:', error);
        }
    }

    async function loadDemoMultipleSamples() {
        try {
            const response = await fetch('/api/demo/multiple-samples', {
                method: 'GET',
                credentials: 'include'
            });
            
            if (!response.ok) {
                throw new Error('데모 샘플 파일들을 가져올 수 없습니다');
            }
            
            const data = await response.json();
            const samples = data.samples;
            
            // Create virtual file objects from the content
            const files = samples.map(sample => {
                const blob = new Blob([sample.content], { type: 'text/html' });
                return new File([blob], sample.filename, { type: 'text/html' });
            });
            
            // Simulate multiple file drop
            handleMultipleFiles(files);
            
        } catch (error) {
            const statusElement = document.getElementById('multipleVectorcastStatus');
            showStatus(statusElement, `데모 로드 실패: ${error.message}`, false);
            console.error('Error loading demo multiple samples:', error);
        }
    }

</script>

</body>
</html>
