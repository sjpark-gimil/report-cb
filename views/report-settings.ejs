<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/images/favicon.ico">
    <title>Report Path Settings - ATF-Codebeamer</title>
    <link rel="stylesheet" type="text/css" href="css/style.css" />
    <link rel="stylesheet" type="text/css" href="css/darkmode.css" />
  </head>
  
  <body>
    <header class="header">
        <div class="logo"><a href="https://www.mdsit.co.kr/index"><img src="images/mds_logo_horizontal.png" alt="Logo" /></a></div>
        <div class="title-container"><h1>Codebeamer Connector</h1><p>Report Hub by MDS Intelligence</p></div>
        <div class="menu-container">
            <a href="/" class="menu-item <%= currentPath === '/' ? 'active' : '' %>"><img src="images/home.svg" alt="Home" />Home</a>
            <a href="/report-settings" class="menu-item <%= currentPath === '/report-settings' ? 'active' : '' %>"><img src="images/settings.svg" alt="Settings" />Settings</a>
            <a href="#" class="menu-item" onclick="handleLogout()"><img src="images/logout.svg" alt="Logout" />Logout</a>
        </div>                  
    </header>

    <div class="settings-container">
        <h2>서버 설정</h2>
        <p class="settings-description">Codebeamer 서버 주소를 입력해 주세요. 변경사항은 자동으로 저장됩니다.</p>

        <div class="tool-section">
            <h3>서버 주소</h3>
            <div class="path-container" id="server-settings-container">
                <div class="path-input-group">
                    <input type="text" id="server-url" class="path-input" placeholder="http://codebeamer.mdsit.co.kr:8080" value="<%= serverUrl || 'http://codebeamer.mdsit.co.kr:8080' %>" />
                </div>
            </div>
        </div>

        <h2>리포트 경로 설정</h2>
        <p class="settings-description">각 도구의 리포트 경로를 설정해 주세요. 변경사항은 자동으로 저장됩니다.</p>

        <div class="tool-section">
            <h3>Polyspace Bugfinder</h3>
            <div class="path-container" id="helix-path-container">
                <div class="path-input-group">
                    <input type="text" class="path-input" data-tool="helix" data-index="0" placeholder="Enter report path" value="<%= helixPath %>" />
                    <button class="remove-path-btn" onclick="removePath(this)" disabled>-</button>
                </div>
                <button class="add-path-btn" onclick="addPath('helix')">+ 리포트 경로 추가</button>
            </div>
        </div>

        <div class="tool-section">
            <h3>Simulink (정적검증)</h3>
            <div class="path-container" id="codesonar-path-container">
                <div class="path-input-group">
                    <input type="text" class="path-input" data-tool="codesonar" data-index="0" placeholder="Enter report path" value="<%= codesonarPath %>" />
                    <button class="remove-path-btn" onclick="removePath(this)" disabled>-</button>
                </div>
                <button class="add-path-btn" onclick="addPath('codesonar')">+ 리포트 경로 추가</button>
            </div>
        </div>

        <div class="tool-section">
            <h3>VectorCAST</h3>
            <div class="path-container" id="vectorcast-path-container">
                <div class="path-input-group">
                    <input type="text" class="path-input" data-tool="vectorcast" data-index="0" placeholder="Enter report path" value="<%= vectorcastPath %>" />
                    <button class="remove-path-btn" onclick="removePath(this)" disabled>-</button>
                </div>
                <button class="add-path-btn" onclick="addPath('vectorcast')">+ 리포트 경로 추가</button>
            </div>
        </div>

        <div class="tool-section">
            <h3>Simulink (동적검증)</h3>
            <div class="path-container" id="rapita-path-container">
                <div class="path-input-group">
                    <input type="text" class="path-input" data-tool="rapita" data-index="0" placeholder="Enter report path" value="<%= rapitaPath %>" />
                    <button class="remove-path-btn" onclick="removePath(this)" disabled>-</button>
                </div>
                <button class="add-path-btn" onclick="addPath('rapita')">+ 리포트 경로 추가</button>
            </div>
        </div>

        <div class="status-message" id="status-message"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const savedServerUrl = localStorage.getItem('serverUrl');
            if (savedServerUrl) document.getElementById('server-url').value = savedServerUrl;
            document.getElementById('server-url').addEventListener('input', saveServerSettings);

            const tools = ['helix', 'codesonar', 'vectorcast', 'rapita'];
            tools.forEach(tool => {
                const savedPaths = JSON.parse(localStorage.getItem(`${tool}AdditionalPaths`) || '[]');
                savedPaths.forEach(path => addSavedPath(tool, path));
            });
            document.querySelectorAll('.path-input').forEach(input => {
                input.addEventListener('input', savePath);
            });
        });

        function saveServerSettings() {
            const serverUrl = document.getElementById('server-url').value;
            localStorage.setItem('serverUrl', serverUrl);
            localStorage.setItem('settingsUpdatedAt', Date.now().toString());

            fetch('/settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ serverUrl })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showStatus('서버 설정이 저장되었습니다');
                } else {
                    showStatus('서버 설정 저장 실패: ' + (data.message || '알 수 없는 오류'), true);
                }
            })
            .catch(error => {
                console.error('Settings save error:', error);
                showStatus('서버 설정 저장 실패: ' + error.message, true);
            });
        }

        function addSavedPath(tool, pathValue) {
            const container = document.getElementById(`${tool}-path-container`);
            const inputs = container.querySelectorAll('.path-input');
            const newIndex = inputs.length;       
            const inputGroup = document.createElement('div');
            inputGroup.className = 'path-input-group';
            
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'path-input';
            input.dataset.tool = tool;
            input.dataset.index = newIndex;
            input.placeholder = 'Enter report path';
            input.value = pathValue;
            input.addEventListener('input', savePath);
            
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-path-btn';
            removeBtn.textContent = '-';
            removeBtn.onclick = function() { removePath(this); };        
            inputGroup.appendChild(input);
            inputGroup.appendChild(removeBtn);
  
            const addBtn = container.querySelector('.add-path-btn');
            container.insertBefore(inputGroup, addBtn);

            if (newIndex > 0) {
                container.querySelectorAll('.remove-path-btn').forEach(btn => {
                    btn.disabled = false;
                });
            }
        }

        function addPath(tool) {
            const container = document.getElementById(`${tool}-path-container`);
            const inputs = container.querySelectorAll('.path-input');
            const newIndex = inputs.length;       
            const inputGroup = document.createElement('div');
            inputGroup.className = 'path-input-group';
            
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'path-input';
            input.dataset.tool = tool;
            input.dataset.index = newIndex;
            input.placeholder = 'Enter report path';
            input.addEventListener('input', savePath);
            
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-path-btn';
            removeBtn.textContent = '-';
            removeBtn.onclick = function() { removePath(this); };
            
            inputGroup.appendChild(input);
            inputGroup.appendChild(removeBtn);

            const addBtn = container.querySelector('.add-path-btn');
            container.insertBefore(inputGroup, addBtn);
 
            if (newIndex > 0) {
                container.querySelectorAll('.remove-path-btn').forEach(btn => {
                    btn.disabled = false;
                });
            }

            saveAdditionalPaths(tool);
            showStatus('경로가 성공적으로 추가되었습니다');
        }

        function removePath(button) {
            const inputGroup = button.parentElement;
            const container = inputGroup.parentElement;
            const tool = inputGroup.querySelector('.path-input').dataset.tool;     
            inputGroup.remove();

            const inputs = container.querySelectorAll('.path-input');
            inputs.forEach((input, index) => {
                input.dataset.index = index;
            });

            if (inputs.length === 1) {
                container.querySelector('.remove-path-btn').disabled = true;
            }

            saveAdditionalPaths(tool);
            showStatus('경로가 성공적으로 제거되었습니다');
        }

        function savePath(event) {
            const input = event.target;
            const tool = input.dataset.tool;
            const index = parseInt(input.dataset.index);

            if (index === 0) {
                localStorage.setItem(`${tool}PrimaryPath`, input.value);
                localStorage.setItem('settingsUpdatedAt', Date.now().toString());

                const reportPaths = {};
                reportPaths[tool] = input.value;
                
                fetch('/settings', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reportPaths })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showStatus('설정이 성공적으로 저장되었습니다');
                    } else {
                        showStatus('설정 저장 실패: ' + (data.message || '알 수 없는 오류'), true);
                    }
                })
                .catch(error => {
                    console.error('Path save error:', error);
                    showStatus('설정 저장 실패: ' + error.message, true);
                });
            }

            saveAdditionalPaths(tool);
        }

        function saveAdditionalPaths(tool) {
            const container = document.getElementById(`${tool}-path-container`);
            const inputs = container.querySelectorAll('.path-input');
            const additionalPaths = Array.from(inputs)
                .filter(input => parseInt(input.dataset.index) > 0)
                .map(input => input.value);
            
            localStorage.setItem(`${tool}AdditionalPaths`, JSON.stringify(additionalPaths));
        }

        function showStatus(message, isError = false) {
            const status = document.getElementById('status-message');
            status.textContent = message;
            status.className = isError ? 'status-message error' : 'status-message success';
            status.style.display = 'block';

            setTimeout(() => {
                status.style.display = 'none';
            }, 3000);
        }

        function handleLogout() {
            fetch('/logout', { method: 'POST' })
                .then(() => { window.location.href = '/login'; })
                .catch(error => console.error('Logout error:', error));
        }
    </script>
  </body>
</html> 